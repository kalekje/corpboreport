\usepackage{etoolbox} %

\usepackage{xparse} % smart definition of commands
\usepackage{pdftexcmds}  % string comparison with expanded input args
\usepackage{xpatch}  %add to e toolbox pre, app, etc. to command or environments, https://ctan.math.illinois.edu/macros/latex/contrib/xpatch/xpatch.pdf

\RequirePackage{datetime2}
\DTMsetup{datesep={-}}

\usepackage{calc}  % allows us to use expressions like {\linewidth-2ex} in commands
\usepackage{xfp}  % floating point math
\usepackage{xspace}  % smartly looks at space after commands

%\usepackage{tabto}% possibly usful for two column lists %http://tug.ctan.org/tex-archive/macros/latex/contrib/tabto/tabto-doc.pdf
%%%

\usepackage{catchfile} % catches a .tex file as a command

%%% pdf stuff
\usepackage{pdflscape}
\usepackage{pdfpages}  % provides \includepdf command
\usepackage{grffile}  % removes the pdf file name for includegraphics with a pdf file type
\usepackage{afterpage} % can add code after page done, helps with pdflscape with inserting a page randomly,

\usepackage[export]{adjustbox} % provide additional commands for graphicsx allows us to adjust graphics,  http://mirrors.ibiblio.org/CTAN/macros/latex/contrib/adjustbox/adjustbox.pdf


\newtoggle{csdefined}

\newcommand{\ifdefOR}[4]{%
\togglefalse{csdefined}%
\ifdef{#1}{\toggletrue{csdefined}}{}%
\ifdef{#2}{\toggletrue{csdefined}}{}%
    \iftoggle{csdefined}{#3}{#4}%
    \togglefalse{csdefined}%<<<todo I should confirm global behaviour...
}


\newcommand{\invtoggle}[1]{% invert a toggle
\iftoggle{#1}{\togglefalse{#1}}{\toggletrue{#1}}%
}

\newcommand{\gettogglestate}[1]{% get a toggles state
\iftoggle{#1}{true}{false}%
}


\let\strcmp\pdf@strcmp

\NewDocumentCommand{\ifstringeqx}{m m m O{}}{% if string equal fully expanded
    \ifnum\strcmp{#1}{#2}=0 #3\else#4\fi%
}

\NewDocumentCommand{\DoIfnotEmpty}{m m O{}}{%
    \ifstringeqx{#1}{}{#2}{#3}%
}

% requires ifthen package, does #2 if #1 is NOT empty, othwerise (optionally) do #3 can take command inputs

\newcommand{\DoWithoutPrinting}[1]{\setbox0\vbox{#1}} % https://tex.stackexchange.com/questions/417327/is-it-possible-to-compile-but-not-showing-a-part

\newcommand{\DontDo}[1]{} %command that does nothing


\newcommand*\makealph[1]{\symbol{\numexpr96+#1}}% also can use \numexpr`a-1+#1
\newcommand*\makeAlph[1]{\symbol{\numexpr64+#1}}


%% x parse pre-processor, expands an argument, use by putting >{\ExpArgOnceProc} in front of arg spec
% https://tex.stackexchange.com/questions/616804/using-definitions-for-key-val-arguments/616814#616814
\newcommand\ExpArgOnceProc[1]
  {\edef\ProcessedArgument{\unexpanded\expandafter{#1}}}

\ProvideDocumentCommand{\providelength}{ m m }{%
    \ifdeflength{#1}{% It is already defined!
    }{% Not defined, so define it!
        \newlength{#1}%
        \setlength{#1}{#2}
    }{}%
    }%



%% todo need pdf string title, must check YAML vars for this.. strip out basic commands
%% https://tex.stackexchange.com/questions/351877/hyperref-pdftitle-manages-line-breaks-in-a-strange-way
%%


\usepackage{luacode} %
%% Replace text in a latex definition
% * will redefine the macro, leaving it will only print the new val
\begin{luacode*}
function DefReplText(s, def, bef, aft)
    local DefReplTextVal = token.get_macro(def)
    DefReplTextVal = DefReplTextVal:gsub(bef, aft)
    if s == _xFalse then
        tex.sprint(DefReplTextVal)
    else
        token.set_macro(def, DefReplTextVal ,'global')
    end
end
\end{luacode*}
\NewDocumentCommand{\DefReplText}{ s m m m }{\luadirect{%
    DefReplText(\luastring{#1},\luastringN{#2},\luastringN{#3},\luastringN{#4})
}}

\NewDocumentCommand{\MakeOneLineDef}{m o}{%
todo take a definition, string \\ with single space, and add xspace.
Useful for pdftitles, other things
\begin{luacode*}
-- do something here to make a definition
\end{luacode*}
}



% enumerate text           *A +a   {pre} {num} {post} <inbetween>  <between last two>
\NewDocumentCommand{\enumtext}{s t+ O{} m  O{} D<>{, } D<>{#6}}{%
\foreach \n in {1,...,#4}{%
    #3%
    \IfBooleanTF{#1}{\makeAlph{\n}}{\IfBooleanTF{#2}{\makealph{\n}}{\n}}%
    %
    #5%
    \ifnum\n<\fpeval{#4-1}%
    #6%
    \else%
    \ifnum\n<\fpeval{#4}%
    #7%
    \fi%
    \fi%
}}

% iter text, sandwhich in between  [before] {list of text}  [after]
% mandatory argument can be {Kale,Britt,Serena}, or {1,3,...,9}
\NewDocumentCommand{\itertext}{O{} m D(){} O{,\ }}{%
\foreach \n in {#2}{%
    \mbox{#1\n#3}#4%
}}

%% todo better syntax
%\itertext<b>{1,2}<a>[; ] --> b1a, b2a,
